const passport = require('passport');
const LocalStrategy = require ('passport-local').Strategy;
const bcrypt = require('bcrypt');
const User = require('../models/User');
const saltRounds = 10;

passport.use('register',
    new LocalStrategy(
        {
            usernameField: 'email',
            passwordField: 'password',
            passReqToCallback: true,
        },
        async (req, email, password, done) => {
            try {
                const previousUser = await User.findOne({email: email});
                // Si existe el usuario lanzo un error
                if(previousUser){
                    const error = new Error('El usuario está registrado');
                    return done(error)
                }
                //Si no existe, vamos a encriptar la contraseña antes de guardarla
                const pwdHash = await bcrypt.hash(password, saltRounds)
                const newUser = new User ({
                    email: email,
                    password: pwdHash
                })
                const savedUser = await newUser.save();
                done(null, savedUser)

            } catch (err){
                return done(err);
            }
        }
    )
);

passport.use('login', new LocalStrategy(
    {
        usernameField: 'email',
        passwordField: 'password',
        passReqToCallback: true,
    },
    async(req, email, password, done) =>
    {
        try{
            const currentUser = await User.findOne({email: email});
            //si no existe el usuario, error
            if (!currentUser){
                const error = new Error ('El usuario no existe');
                return done(error)
            }
            //Si existe el usuario, vamos a comparar las contraseñas.
            const isValidPassword = await bcrypt.compare(
                password,
                currentUser.password
            );
            if (!isValidPassword){
                const error = new Error('La contraseña no es válida');
                return done(error)
            } else {
                currentUser.password = null;
                return done(null, currentUser);
            }
        } catch (error){
            return done(error)
        }
    }
));

// Esta función usará el usuario de req.LogIn para registrar su id.
passport.serializeUser((user, done) => {
    return done(null, user._id);
  });
  
  // Esta función buscará un usuario dada su _id en la DB y populará req.user si existe
  passport.deserializeUser(async (userId, done) => {
    try {
      const existingUser = await User.findById(userId);
      return done(null, existingUser);
    } catch (err) {
      return done(err);
    }
  });